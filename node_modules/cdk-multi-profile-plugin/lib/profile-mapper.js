"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrecedenceProfileMapper = exports.LocalProjectDirMapper = exports.EnvironmentAwareGlobalProfileMapper = exports.PackageJsonProfileMapper = exports.JsonFileProfileMapper = void 0;
const fs = __importStar(require("fs-extra"));
const path = __importStar(require("path"));
const os = __importStar(require("os"));
/*
 * Resolves profiles from a json file. The key for resolving a mapping is "awsProfiles".
 *
 * example:
 *  `{
 *      "awsProfiles": {
 *        "123": "default123",
 *        "456": "default123"
 *      }
 *  }`
 *
 */
class JsonFileProfileMapper {
    constructor(props) {
        this._encoding = 'utf8';
        this._workingDirectory = props.workingDirectory;
        this._filename = props.filename;
    }
    resolve() {
        const filename = path.join(this._workingDirectory, this._filename);
        if (!fs.existsSync(filename)) {
            return {};
        }
        try {
            const pkg = JSON.parse(fs.readFileSync(filename, this._encoding));
            const { awsProfiles } = pkg;
            return awsProfiles;
        }
        catch (e) {
            console.log(`Failed to parse file ${this._filename}: `, e.message);
        }
        return {};
    }
}
exports.JsonFileProfileMapper = JsonFileProfileMapper;
// Will use local package.json for mapping an accountnumber to a local profile
class PackageJsonProfileMapper {
    resolve() {
        return new JsonFileProfileMapper({
            workingDirectory: process.cwd(),
            filename: 'package.json',
        }).resolve();
    }
}
exports.PackageJsonProfileMapper = PackageJsonProfileMapper;
// Will default to ~/.cdkmultiprofileplung.json and can be overriden by environment variable
// CDK_MULTI_PROFILE_PLUGIN_CONFIG=/path/to/file.json
class EnvironmentAwareGlobalProfileMapper {
    constructor() {
        this._defaultGlobalConfigurationFile = '.cdkmultiprofileplugin.json';
        this._workingDirectory = os.homedir();
        this._filename = this._defaultGlobalConfigurationFile;
        const configFileLocationOverride = process.env[EnvironmentAwareGlobalProfileMapper.environmentVariableName];
        if (configFileLocationOverride) {
            const configFile = path.parse(configFileLocationOverride);
            this._workingDirectory = configFile.dir;
            this._filename = configFile.base;
        }
    }
    resolve() {
        return new JsonFileProfileMapper({
            workingDirectory: this._workingDirectory,
            filename: this._filename,
        }).resolve();
    }
}
exports.EnvironmentAwareGlobalProfileMapper = EnvironmentAwareGlobalProfileMapper;
EnvironmentAwareGlobalProfileMapper.environmentVariableName = 'CDK_MULTI_PROFILE_PLUGIN_CONFIG';
// Can be used in local project directory. Can be added or ignored by your VCS
class LocalProjectDirMapper {
    resolve() {
        return new JsonFileProfileMapper({
            workingDirectory: process.cwd(),
            filename: 'cdkmultiprofileplugin.json',
        }).resolve();
    }
}
exports.LocalProjectDirMapper = LocalProjectDirMapper;
// Uses all mappers and applies precedence
class PrecedenceProfileMapper {
    resolve() {
        // Temporary in order to get it working again
        const packageJsonMappings = new PackageJsonProfileMapper().resolve();
        const projectLocalMappings = new LocalProjectDirMapper().resolve();
        const globalMappings = new EnvironmentAwareGlobalProfileMapper().resolve();
        return {
            ...packageJsonMappings,
            ...projectLocalMappings,
            ...globalMappings,
        };
    }
}
exports.PrecedenceProfileMapper = PrecedenceProfileMapper;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZmlsZS1tYXBwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcHJvZmlsZS1tYXBwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDZDQUErQjtBQUMvQiwyQ0FBNkI7QUFDN0IsdUNBQXlCO0FBY3pCOzs7Ozs7Ozs7OztHQVdHO0FBQ0gsTUFBYSxxQkFBcUI7SUFLaEMsWUFBWSxLQUFpQztRQUZyQyxjQUFTLEdBQUcsTUFBTSxDQUFDO1FBR3pCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7UUFDaEQsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO0lBQ2xDLENBQUM7SUFFRCxPQUFPO1FBQ0wsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ25FLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQzVCLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFDRCxJQUFJO1lBQ0YsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztZQUNsRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsR0FBRyxDQUFDO1lBQzVCLE9BQU8sV0FBVyxDQUFDO1NBQ3BCO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixJQUFJLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3BFO1FBQ0QsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0NBQ0Y7QUF4QkQsc0RBd0JDO0FBRUQsOEVBQThFO0FBQzlFLE1BQWEsd0JBQXdCO0lBQ25DLE9BQU87UUFDTCxPQUFPLElBQUkscUJBQXFCLENBQUM7WUFDL0IsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLEdBQUcsRUFBRTtZQUMvQixRQUFRLEVBQUUsY0FBYztTQUN6QixDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDZixDQUFDO0NBQ0Y7QUFQRCw0REFPQztBQUVELDRGQUE0RjtBQUM1RixxREFBcUQ7QUFDckQsTUFBYSxtQ0FBbUM7SUFROUM7UUFMaUIsb0NBQStCLEdBQzlDLDZCQUE2QixDQUFDO1FBSzlCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDdEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsK0JBQStCLENBQUM7UUFDdEQsTUFBTSwwQkFBMEIsR0FDOUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQ0FBbUMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQzNFLElBQUksMEJBQTBCLEVBQUU7WUFDOUIsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1lBQzFELElBQUksQ0FBQyxpQkFBaUIsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDO1lBQ3hDLElBQUksQ0FBQyxTQUFTLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQztTQUNsQztJQUNILENBQUM7SUFFRCxPQUFPO1FBQ0wsT0FBTyxJQUFJLHFCQUFxQixDQUFDO1lBQy9CLGdCQUFnQixFQUFFLElBQUksQ0FBQyxpQkFBaUI7WUFDeEMsUUFBUSxFQUFFLElBQUksQ0FBQyxTQUFTO1NBQ3pCLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNmLENBQUM7O0FBekJILGtGQTBCQztBQXpCd0IsMkRBQXVCLEdBQzVDLGlDQUFpQyxDQUFDO0FBMEJ0Qyw4RUFBOEU7QUFDOUUsTUFBYSxxQkFBcUI7SUFDaEMsT0FBTztRQUNMLE9BQU8sSUFBSSxxQkFBcUIsQ0FBQztZQUMvQixnQkFBZ0IsRUFBRSxPQUFPLENBQUMsR0FBRyxFQUFFO1lBQy9CLFFBQVEsRUFBRSw0QkFBNEI7U0FDdkMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2YsQ0FBQztDQUNGO0FBUEQsc0RBT0M7QUFFRCwwQ0FBMEM7QUFDMUMsTUFBYSx1QkFBdUI7SUFDbEMsT0FBTztRQUNMLDZDQUE2QztRQUM3QyxNQUFNLG1CQUFtQixHQUFHLElBQUksd0JBQXdCLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNyRSxNQUFNLG9CQUFvQixHQUFHLElBQUkscUJBQXFCLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNuRSxNQUFNLGNBQWMsR0FBRyxJQUFJLG1DQUFtQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDM0UsT0FBTztZQUNMLEdBQUcsbUJBQW1CO1lBQ3RCLEdBQUcsb0JBQW9CO1lBQ3ZCLEdBQUcsY0FBYztTQUNsQixDQUFDO0lBQ0osQ0FBQztDQUNGO0FBWkQsMERBWUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0ICogYXMgb3MgZnJvbSAnb3MnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXBwaW5nIGZyb20gYWNjb3VudG51bWJlciB0byBhIGxvY2FsIGF3cyBwcm9maWxlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUHJvZmlsZU1hcHBlciB7XG4gIHJlc29sdmUoKTogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBKc29uRmlsZVByb2ZpbGVNYXBwZXJQcm9wcyB7XG4gIHdvcmtpbmdEaXJlY3Rvcnk6IHN0cmluZztcbiAgZmlsZW5hbWU6IHN0cmluZztcbn1cblxuLypcbiAqIFJlc29sdmVzIHByb2ZpbGVzIGZyb20gYSBqc29uIGZpbGUuIFRoZSBrZXkgZm9yIHJlc29sdmluZyBhIG1hcHBpbmcgaXMgXCJhd3NQcm9maWxlc1wiLlxuICpcbiAqIGV4YW1wbGU6XG4gKiAgYHtcbiAqICAgICAgXCJhd3NQcm9maWxlc1wiOiB7XG4gKiAgICAgICAgXCIxMjNcIjogXCJkZWZhdWx0MTIzXCIsXG4gKiAgICAgICAgXCI0NTZcIjogXCJkZWZhdWx0MTIzXCJcbiAqICAgICAgfVxuICogIH1gXG4gKlxuICovXG5leHBvcnQgY2xhc3MgSnNvbkZpbGVQcm9maWxlTWFwcGVyIGltcGxlbWVudHMgUHJvZmlsZU1hcHBlciB7XG4gIHByaXZhdGUgcmVhZG9ubHkgX3dvcmtpbmdEaXJlY3Rvcnk6IHN0cmluZztcbiAgcHJpdmF0ZSByZWFkb25seSBfZmlsZW5hbWU6IHN0cmluZztcbiAgcHJpdmF0ZSBfZW5jb2RpbmcgPSAndXRmOCc7XG5cbiAgY29uc3RydWN0b3IocHJvcHM6IEpzb25GaWxlUHJvZmlsZU1hcHBlclByb3BzKSB7XG4gICAgdGhpcy5fd29ya2luZ0RpcmVjdG9yeSA9IHByb3BzLndvcmtpbmdEaXJlY3Rvcnk7XG4gICAgdGhpcy5fZmlsZW5hbWUgPSBwcm9wcy5maWxlbmFtZTtcbiAgfVxuXG4gIHJlc29sdmUoKTogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSB7XG4gICAgY29uc3QgZmlsZW5hbWUgPSBwYXRoLmpvaW4odGhpcy5fd29ya2luZ0RpcmVjdG9yeSwgdGhpcy5fZmlsZW5hbWUpO1xuICAgIGlmICghZnMuZXhpc3RzU3luYyhmaWxlbmFtZSkpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHBrZyA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKGZpbGVuYW1lLCB0aGlzLl9lbmNvZGluZykpO1xuICAgICAgY29uc3QgeyBhd3NQcm9maWxlcyB9ID0gcGtnO1xuICAgICAgcmV0dXJuIGF3c1Byb2ZpbGVzO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUubG9nKGBGYWlsZWQgdG8gcGFyc2UgZmlsZSAke3RoaXMuX2ZpbGVuYW1lfTogYCwgZS5tZXNzYWdlKTtcbiAgICB9XG4gICAgcmV0dXJuIHt9O1xuICB9XG59XG5cbi8vIFdpbGwgdXNlIGxvY2FsIHBhY2thZ2UuanNvbiBmb3IgbWFwcGluZyBhbiBhY2NvdW50bnVtYmVyIHRvIGEgbG9jYWwgcHJvZmlsZVxuZXhwb3J0IGNsYXNzIFBhY2thZ2VKc29uUHJvZmlsZU1hcHBlciBpbXBsZW1lbnRzIFByb2ZpbGVNYXBwZXIge1xuICByZXNvbHZlKCk6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0ge1xuICAgIHJldHVybiBuZXcgSnNvbkZpbGVQcm9maWxlTWFwcGVyKHtcbiAgICAgIHdvcmtpbmdEaXJlY3Rvcnk6IHByb2Nlc3MuY3dkKCksXG4gICAgICBmaWxlbmFtZTogJ3BhY2thZ2UuanNvbicsXG4gICAgfSkucmVzb2x2ZSgpO1xuICB9XG59XG5cbi8vIFdpbGwgZGVmYXVsdCB0byB+Ly5jZGttdWx0aXByb2ZpbGVwbHVuZy5qc29uIGFuZCBjYW4gYmUgb3ZlcnJpZGVuIGJ5IGVudmlyb25tZW50IHZhcmlhYmxlXG4vLyBDREtfTVVMVElfUFJPRklMRV9QTFVHSU5fQ09ORklHPS9wYXRoL3RvL2ZpbGUuanNvblxuZXhwb3J0IGNsYXNzIEVudmlyb25tZW50QXdhcmVHbG9iYWxQcm9maWxlTWFwcGVyIGltcGxlbWVudHMgUHJvZmlsZU1hcHBlciB7XG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgZW52aXJvbm1lbnRWYXJpYWJsZU5hbWUgPVxuICAgICdDREtfTVVMVElfUFJPRklMRV9QTFVHSU5fQ09ORklHJztcbiAgcHJpdmF0ZSByZWFkb25seSBfZGVmYXVsdEdsb2JhbENvbmZpZ3VyYXRpb25GaWxlID1cbiAgICAnLmNka211bHRpcHJvZmlsZXBsdWdpbi5qc29uJztcbiAgcHJpdmF0ZSByZWFkb25seSBfd29ya2luZ0RpcmVjdG9yeTogc3RyaW5nO1xuICBwcml2YXRlIHJlYWRvbmx5IF9maWxlbmFtZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3dvcmtpbmdEaXJlY3RvcnkgPSBvcy5ob21lZGlyKCk7XG4gICAgdGhpcy5fZmlsZW5hbWUgPSB0aGlzLl9kZWZhdWx0R2xvYmFsQ29uZmlndXJhdGlvbkZpbGU7XG4gICAgY29uc3QgY29uZmlnRmlsZUxvY2F0aW9uT3ZlcnJpZGUgPVxuICAgICAgcHJvY2Vzcy5lbnZbRW52aXJvbm1lbnRBd2FyZUdsb2JhbFByb2ZpbGVNYXBwZXIuZW52aXJvbm1lbnRWYXJpYWJsZU5hbWVdO1xuICAgIGlmIChjb25maWdGaWxlTG9jYXRpb25PdmVycmlkZSkge1xuICAgICAgY29uc3QgY29uZmlnRmlsZSA9IHBhdGgucGFyc2UoY29uZmlnRmlsZUxvY2F0aW9uT3ZlcnJpZGUpO1xuICAgICAgdGhpcy5fd29ya2luZ0RpcmVjdG9yeSA9IGNvbmZpZ0ZpbGUuZGlyO1xuICAgICAgdGhpcy5fZmlsZW5hbWUgPSBjb25maWdGaWxlLmJhc2U7XG4gICAgfVxuICB9XG5cbiAgcmVzb2x2ZSgpOiB7IFtwOiBzdHJpbmddOiBzdHJpbmcgfSB7XG4gICAgcmV0dXJuIG5ldyBKc29uRmlsZVByb2ZpbGVNYXBwZXIoe1xuICAgICAgd29ya2luZ0RpcmVjdG9yeTogdGhpcy5fd29ya2luZ0RpcmVjdG9yeSxcbiAgICAgIGZpbGVuYW1lOiB0aGlzLl9maWxlbmFtZSxcbiAgICB9KS5yZXNvbHZlKCk7XG4gIH1cbn1cblxuLy8gQ2FuIGJlIHVzZWQgaW4gbG9jYWwgcHJvamVjdCBkaXJlY3RvcnkuIENhbiBiZSBhZGRlZCBvciBpZ25vcmVkIGJ5IHlvdXIgVkNTXG5leHBvcnQgY2xhc3MgTG9jYWxQcm9qZWN0RGlyTWFwcGVyIGltcGxlbWVudHMgUHJvZmlsZU1hcHBlciB7XG4gIHJlc29sdmUoKTogeyBbcDogc3RyaW5nXTogc3RyaW5nIH0ge1xuICAgIHJldHVybiBuZXcgSnNvbkZpbGVQcm9maWxlTWFwcGVyKHtcbiAgICAgIHdvcmtpbmdEaXJlY3Rvcnk6IHByb2Nlc3MuY3dkKCksXG4gICAgICBmaWxlbmFtZTogJ2Nka211bHRpcHJvZmlsZXBsdWdpbi5qc29uJyxcbiAgICB9KS5yZXNvbHZlKCk7XG4gIH1cbn1cblxuLy8gVXNlcyBhbGwgbWFwcGVycyBhbmQgYXBwbGllcyBwcmVjZWRlbmNlXG5leHBvcnQgY2xhc3MgUHJlY2VkZW5jZVByb2ZpbGVNYXBwZXIgaW1wbGVtZW50cyBQcm9maWxlTWFwcGVyIHtcbiAgcmVzb2x2ZSgpOiB7IFtwOiBzdHJpbmddOiBzdHJpbmcgfSB7XG4gICAgLy8gVGVtcG9yYXJ5IGluIG9yZGVyIHRvIGdldCBpdCB3b3JraW5nIGFnYWluXG4gICAgY29uc3QgcGFja2FnZUpzb25NYXBwaW5ncyA9IG5ldyBQYWNrYWdlSnNvblByb2ZpbGVNYXBwZXIoKS5yZXNvbHZlKCk7XG4gICAgY29uc3QgcHJvamVjdExvY2FsTWFwcGluZ3MgPSBuZXcgTG9jYWxQcm9qZWN0RGlyTWFwcGVyKCkucmVzb2x2ZSgpO1xuICAgIGNvbnN0IGdsb2JhbE1hcHBpbmdzID0gbmV3IEVudmlyb25tZW50QXdhcmVHbG9iYWxQcm9maWxlTWFwcGVyKCkucmVzb2x2ZSgpO1xuICAgIHJldHVybiB7XG4gICAgICAuLi5wYWNrYWdlSnNvbk1hcHBpbmdzLFxuICAgICAgLi4ucHJvamVjdExvY2FsTWFwcGluZ3MsXG4gICAgICAuLi5nbG9iYWxNYXBwaW5ncyxcbiAgICB9O1xuICB9XG59XG4iXX0=