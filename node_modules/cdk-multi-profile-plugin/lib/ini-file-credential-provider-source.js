"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IniFileCredentialProviderSource = void 0;
const safe_1 = require("colors/safe");
const lodash_isempty_1 = __importDefault(require("lodash.isempty"));
const aws_sdk_1 = require("aws-sdk");
const aws_cdk_1 = require("aws-cdk");
const utils_1 = require("./utils");
const profile_credentials_cache_1 = require("./profile-credentials-cache");
const profile_config_1 = require("./profile-config");
const sso_login_cache_1 = require("./sso-login-cache");
const profileCredentialsCache = new profile_credentials_cache_1.ProfileCredentialsCache();
class IniFileCredentialProviderSource {
    constructor(name, profiles, filename) {
        this.name = name;
        this.profiles = profiles;
        this.filename = filename;
        this.profileConfig = new profile_config_1.ProfileConfig(utils_1.getConfigFilename());
        this.ssoLoginCache = new sso_login_cache_1.SSOLoginCache(utils_1.getSSOCachePath());
    }
    canProvideCredentials(accountId) {
        return Promise.resolve(Object.prototype.hasOwnProperty.call(this.profiles, accountId));
    }
    async getProvider(accountId, mode) {
        const profile = this.profiles[accountId];
        console.log('\n');
        console.log(` ðŸš€  Using profile ${safe_1.green(profile)} for account ${safe_1.green(accountId)} in mode ${safe_1.green(aws_cdk_1.Mode[mode])}`);
        console.log('\n');
        let credentials = profileCredentialsCache.get(profile);
        if (!credentials) {
            if (this.profileConfig.isSSOProfile(profile)) {
                const ssoProfile = this.profileConfig.getProfile(profile);
                const ssoLogin = this.ssoLoginCache.getCachedLogin(ssoProfile);
                const sso = new aws_sdk_1.SSO({ region: ssoProfile.sso_region });
                const { roleCredentials } = await sso
                    .getRoleCredentials({
                    accessToken: ssoLogin.accessToken,
                    accountId: ssoProfile.sso_account_id,
                    roleName: ssoProfile.sso_role_name,
                })
                    .promise();
                if (!(roleCredentials === null || roleCredentials === void 0 ? void 0 : roleCredentials.accessKeyId) ||
                    !roleCredentials.secretAccessKey ||
                    !roleCredentials.sessionToken)
                    throw new Error('Invalid roleCredentials!');
                credentials = new aws_sdk_1.Credentials({
                    accessKeyId: roleCredentials.accessKeyId,
                    secretAccessKey: roleCredentials.secretAccessKey,
                    sessionToken: roleCredentials.sessionToken,
                });
            }
            else {
                credentials = new aws_sdk_1.SharedIniFileCredentials({
                    tokenCodeFn: utils_1.tokenCodeFn,
                    filename: this.filename,
                    profile,
                });
            }
            profileCredentialsCache.set(profile, credentials);
        }
        return Promise.resolve(credentials);
    }
    isAvailable() {
        if (this.filename && !lodash_isempty_1.default(this.profiles))
            return Promise.resolve(true);
        return Promise.resolve(false);
    }
}
exports.IniFileCredentialProviderSource = IniFileCredentialProviderSource;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pLWZpbGUtY3JlZGVudGlhbC1wcm92aWRlci1zb3VyY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5pLWZpbGUtY3JlZGVudGlhbC1wcm92aWRlci1zb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsc0NBQW9DO0FBQ3BDLG9FQUFxQztBQUNyQyxxQ0FBcUU7QUFDckUscUNBQXlEO0FBRXpELG1DQUEwRTtBQUMxRSwyRUFBc0U7QUFDdEUscURBQWlEO0FBQ2pELHVEQUFrRDtBQUVsRCxNQUFNLHVCQUF1QixHQUFHLElBQUksbURBQXVCLEVBQUUsQ0FBQztBQUU5RCxNQUFhLCtCQUErQjtJQUsxQyxZQUNrQixJQUFZLEVBQ1gsUUFBbUMsRUFDbkMsUUFBZ0I7UUFGakIsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUNYLGFBQVEsR0FBUixRQUFRLENBQTJCO1FBQ25DLGFBQVEsR0FBUixRQUFRLENBQVE7UUFFakMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLDhCQUFhLENBQUMseUJBQWlCLEVBQUUsQ0FBQyxDQUFDO1FBQzVELElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSwrQkFBYSxDQUFDLHVCQUFlLEVBQUUsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFTSxxQkFBcUIsQ0FBQyxTQUFpQjtRQUM1QyxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQ3BCLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUMvRCxDQUFDO0lBQ0osQ0FBQztJQUVNLEtBQUssQ0FBQyxXQUFXLENBQ3RCLFNBQWlCLEVBQ2pCLElBQVU7UUFFVixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRXpDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEIsT0FBTyxDQUFDLEdBQUcsQ0FDVCxzQkFBc0IsWUFBSyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsWUFBSyxDQUN2RCxTQUFTLENBQ1YsWUFBWSxZQUFLLENBQUMsY0FBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FDakMsQ0FBQztRQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFbEIsSUFBSSxXQUFXLEdBQUcsdUJBQXVCLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXZELElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDaEIsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDNUMsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQzFELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUUvRCxNQUFNLEdBQUcsR0FBRyxJQUFJLGFBQUcsQ0FBQyxFQUFFLE1BQU0sRUFBRSxVQUFVLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztnQkFFdkQsTUFBTSxFQUFFLGVBQWUsRUFBRSxHQUFHLE1BQU0sR0FBRztxQkFDbEMsa0JBQWtCLENBQUM7b0JBQ2xCLFdBQVcsRUFBRSxRQUFRLENBQUMsV0FBVztvQkFDakMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxjQUFjO29CQUNwQyxRQUFRLEVBQUUsVUFBVSxDQUFDLGFBQWE7aUJBQ25DLENBQUM7cUJBQ0QsT0FBTyxFQUFFLENBQUM7Z0JBRWIsSUFDRSxFQUFDLGVBQWUsYUFBZixlQUFlLHVCQUFmLGVBQWUsQ0FBRSxXQUFXLENBQUE7b0JBQzdCLENBQUMsZUFBZSxDQUFDLGVBQWU7b0JBQ2hDLENBQUMsZUFBZSxDQUFDLFlBQVk7b0JBRTdCLE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztnQkFFOUMsV0FBVyxHQUFHLElBQUkscUJBQVcsQ0FBQztvQkFDNUIsV0FBVyxFQUFFLGVBQWUsQ0FBQyxXQUFXO29CQUN4QyxlQUFlLEVBQUUsZUFBZSxDQUFDLGVBQWU7b0JBQ2hELFlBQVksRUFBRSxlQUFlLENBQUMsWUFBWTtpQkFDM0MsQ0FBQyxDQUFDO2FBQ0o7aUJBQU07Z0JBQ0wsV0FBVyxHQUFHLElBQUksa0NBQXdCLENBQUM7b0JBQ3pDLFdBQVcsRUFBWCxtQkFBVztvQkFDWCxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7b0JBQ3ZCLE9BQU87aUJBQ1IsQ0FBQyxDQUFDO2FBQ0o7WUFFRCx1QkFBdUIsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQ25EO1FBRUQsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFTSxXQUFXO1FBQ2hCLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLHdCQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUFFLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUUzRSxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDaEMsQ0FBQztDQUNGO0FBbEZELDBFQWtGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdyZWVuIH0gZnJvbSAnY29sb3JzL3NhZmUnO1xuaW1wb3J0IGlzRW1wdHkgZnJvbSAnbG9kYXNoLmlzZW1wdHknO1xuaW1wb3J0IHsgU2hhcmVkSW5pRmlsZUNyZWRlbnRpYWxzLCBDcmVkZW50aWFscywgU1NPIH0gZnJvbSAnYXdzLXNkayc7XG5pbXBvcnQgeyBDcmVkZW50aWFsUHJvdmlkZXJTb3VyY2UsIE1vZGUgfSBmcm9tICdhd3MtY2RrJztcblxuaW1wb3J0IHsgdG9rZW5Db2RlRm4sIGdldENvbmZpZ0ZpbGVuYW1lLCBnZXRTU09DYWNoZVBhdGggfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IFByb2ZpbGVDcmVkZW50aWFsc0NhY2hlIH0gZnJvbSAnLi9wcm9maWxlLWNyZWRlbnRpYWxzLWNhY2hlJztcbmltcG9ydCB7IFByb2ZpbGVDb25maWcgfSBmcm9tICcuL3Byb2ZpbGUtY29uZmlnJztcbmltcG9ydCB7IFNTT0xvZ2luQ2FjaGUgfSBmcm9tICcuL3Nzby1sb2dpbi1jYWNoZSc7XG5cbmNvbnN0IHByb2ZpbGVDcmVkZW50aWFsc0NhY2hlID0gbmV3IFByb2ZpbGVDcmVkZW50aWFsc0NhY2hlKCk7XG5cbmV4cG9ydCBjbGFzcyBJbmlGaWxlQ3JlZGVudGlhbFByb3ZpZGVyU291cmNlXG4gIGltcGxlbWVudHMgQ3JlZGVudGlhbFByb3ZpZGVyU291cmNlIHtcbiAgcHJpdmF0ZSBwcm9maWxlQ29uZmlnOiBQcm9maWxlQ29uZmlnO1xuICBwcml2YXRlIHNzb0xvZ2luQ2FjaGU6IFNTT0xvZ2luQ2FjaGU7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IG5hbWU6IHN0cmluZyxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHByb2ZpbGVzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9LFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZmlsZW5hbWU6IHN0cmluZyxcbiAgKSB7XG4gICAgdGhpcy5wcm9maWxlQ29uZmlnID0gbmV3IFByb2ZpbGVDb25maWcoZ2V0Q29uZmlnRmlsZW5hbWUoKSk7XG4gICAgdGhpcy5zc29Mb2dpbkNhY2hlID0gbmV3IFNTT0xvZ2luQ2FjaGUoZ2V0U1NPQ2FjaGVQYXRoKCkpO1xuICB9XG5cbiAgcHVibGljIGNhblByb3ZpZGVDcmVkZW50aWFscyhhY2NvdW50SWQ6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoXG4gICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5wcm9maWxlcywgYWNjb3VudElkKSxcbiAgICApO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldFByb3ZpZGVyKFxuICAgIGFjY291bnRJZDogc3RyaW5nLFxuICAgIG1vZGU6IE1vZGUsXG4gICk6IFByb21pc2U8Q3JlZGVudGlhbHM+IHtcbiAgICBjb25zdCBwcm9maWxlID0gdGhpcy5wcm9maWxlc1thY2NvdW50SWRdO1xuXG4gICAgY29uc29sZS5sb2coJ1xcbicpO1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgYCDwn5qAICBVc2luZyBwcm9maWxlICR7Z3JlZW4ocHJvZmlsZSl9IGZvciBhY2NvdW50ICR7Z3JlZW4oXG4gICAgICAgIGFjY291bnRJZCxcbiAgICAgICl9IGluIG1vZGUgJHtncmVlbihNb2RlW21vZGVdKX1gLFxuICAgICk7XG4gICAgY29uc29sZS5sb2coJ1xcbicpO1xuXG4gICAgbGV0IGNyZWRlbnRpYWxzID0gcHJvZmlsZUNyZWRlbnRpYWxzQ2FjaGUuZ2V0KHByb2ZpbGUpO1xuXG4gICAgaWYgKCFjcmVkZW50aWFscykge1xuICAgICAgaWYgKHRoaXMucHJvZmlsZUNvbmZpZy5pc1NTT1Byb2ZpbGUocHJvZmlsZSkpIHtcbiAgICAgICAgY29uc3Qgc3NvUHJvZmlsZSA9IHRoaXMucHJvZmlsZUNvbmZpZy5nZXRQcm9maWxlKHByb2ZpbGUpO1xuICAgICAgICBjb25zdCBzc29Mb2dpbiA9IHRoaXMuc3NvTG9naW5DYWNoZS5nZXRDYWNoZWRMb2dpbihzc29Qcm9maWxlKTtcblxuICAgICAgICBjb25zdCBzc28gPSBuZXcgU1NPKHsgcmVnaW9uOiBzc29Qcm9maWxlLnNzb19yZWdpb24gfSk7XG5cbiAgICAgICAgY29uc3QgeyByb2xlQ3JlZGVudGlhbHMgfSA9IGF3YWl0IHNzb1xuICAgICAgICAgIC5nZXRSb2xlQ3JlZGVudGlhbHMoe1xuICAgICAgICAgICAgYWNjZXNzVG9rZW46IHNzb0xvZ2luLmFjY2Vzc1Rva2VuLFxuICAgICAgICAgICAgYWNjb3VudElkOiBzc29Qcm9maWxlLnNzb19hY2NvdW50X2lkLFxuICAgICAgICAgICAgcm9sZU5hbWU6IHNzb1Byb2ZpbGUuc3NvX3JvbGVfbmFtZSxcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5wcm9taXNlKCk7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICFyb2xlQ3JlZGVudGlhbHM/LmFjY2Vzc0tleUlkIHx8XG4gICAgICAgICAgIXJvbGVDcmVkZW50aWFscy5zZWNyZXRBY2Nlc3NLZXkgfHxcbiAgICAgICAgICAhcm9sZUNyZWRlbnRpYWxzLnNlc3Npb25Ub2tlblxuICAgICAgICApXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHJvbGVDcmVkZW50aWFscyEnKTtcblxuICAgICAgICBjcmVkZW50aWFscyA9IG5ldyBDcmVkZW50aWFscyh7XG4gICAgICAgICAgYWNjZXNzS2V5SWQ6IHJvbGVDcmVkZW50aWFscy5hY2Nlc3NLZXlJZCxcbiAgICAgICAgICBzZWNyZXRBY2Nlc3NLZXk6IHJvbGVDcmVkZW50aWFscy5zZWNyZXRBY2Nlc3NLZXksXG4gICAgICAgICAgc2Vzc2lvblRva2VuOiByb2xlQ3JlZGVudGlhbHMuc2Vzc2lvblRva2VuLFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNyZWRlbnRpYWxzID0gbmV3IFNoYXJlZEluaUZpbGVDcmVkZW50aWFscyh7XG4gICAgICAgICAgdG9rZW5Db2RlRm4sXG4gICAgICAgICAgZmlsZW5hbWU6IHRoaXMuZmlsZW5hbWUsXG4gICAgICAgICAgcHJvZmlsZSxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHByb2ZpbGVDcmVkZW50aWFsc0NhY2hlLnNldChwcm9maWxlLCBjcmVkZW50aWFscyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjcmVkZW50aWFscyk7XG4gIH1cblxuICBwdWJsaWMgaXNBdmFpbGFibGUoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgaWYgKHRoaXMuZmlsZW5hbWUgJiYgIWlzRW1wdHkodGhpcy5wcm9maWxlcykpIHJldHVybiBQcm9taXNlLnJlc29sdmUodHJ1ZSk7XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKTtcbiAgfVxufVxuIl19