"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_sdk_1 = require("aws-sdk");
const profile_credentials_cache_1 = require("../profile-credentials-cache");
const credentails = new aws_sdk_1.Credentials({
    accessKeyId: 'dummy',
    secretAccessKey: 'dummy',
});
it('should return false if cache is empty', async () => {
    const profileCredentialsCache = new profile_credentials_cache_1.ProfileCredentialsCache();
    expect(profileCredentialsCache.has('profile')).toBe(false);
    expect(profileCredentialsCache.get('profile')).toBe(undefined);
});
it('should return false if credentails are not cached', async () => {
    const profileCredentialsCache = new profile_credentials_cache_1.ProfileCredentialsCache();
    profileCredentialsCache.set('anotherProfile', credentails);
    expect(profileCredentialsCache.has('profile')).toBe(false);
    expect(profileCredentialsCache.get('profile')).toBe(undefined);
});
it('should return true if credentails are cached', async () => {
    const profileCredentialsCache = new profile_credentials_cache_1.ProfileCredentialsCache();
    profileCredentialsCache.set('profile', credentails);
    expect(profileCredentialsCache.has('profile')).toBe(true);
    expect(profileCredentialsCache.get('profile')).toBe(credentails);
});
it('should return true if credentails are listed in cache', async () => {
    const profileCredentialsCache = new profile_credentials_cache_1.ProfileCredentialsCache();
    profileCredentialsCache.set('profile', credentails);
    profileCredentialsCache.set('anotherProfile', credentails);
    expect(profileCredentialsCache.has('profile')).toBe(true);
    expect(profileCredentialsCache.get('profile')).toBe(credentails);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZmlsZS1jcmVkZW50aWFscy1jYWNoZS50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL19fdGVzdHNfXy9wcm9maWxlLWNyZWRlbnRpYWxzLWNhY2hlLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBc0M7QUFDdEMsNEVBQXVFO0FBRXZFLE1BQU0sV0FBVyxHQUFHLElBQUkscUJBQVcsQ0FBQztJQUNsQyxXQUFXLEVBQUUsT0FBTztJQUNwQixlQUFlLEVBQUUsT0FBTztDQUN6QixDQUFDLENBQUM7QUFFSCxFQUFFLENBQUMsdUNBQXVDLEVBQUUsS0FBSyxJQUFJLEVBQUU7SUFDckQsTUFBTSx1QkFBdUIsR0FBRyxJQUFJLG1EQUF1QixFQUFFLENBQUM7SUFDOUQsTUFBTSxDQUFDLHVCQUF1QixDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzRCxNQUFNLENBQUMsdUJBQXVCLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ2pFLENBQUMsQ0FBQyxDQUFDO0FBRUgsRUFBRSxDQUFDLG1EQUFtRCxFQUFFLEtBQUssSUFBSSxFQUFFO0lBQ2pFLE1BQU0sdUJBQXVCLEdBQUcsSUFBSSxtREFBdUIsRUFBRSxDQUFDO0lBQzlELHVCQUF1QixDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUMzRCxNQUFNLENBQUMsdUJBQXVCLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNELE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDakUsQ0FBQyxDQUFDLENBQUM7QUFFSCxFQUFFLENBQUMsOENBQThDLEVBQUUsS0FBSyxJQUFJLEVBQUU7SUFDNUQsTUFBTSx1QkFBdUIsR0FBRyxJQUFJLG1EQUF1QixFQUFFLENBQUM7SUFDOUQsdUJBQXVCLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUNwRCxNQUFNLENBQUMsdUJBQXVCLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFELE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDbkUsQ0FBQyxDQUFDLENBQUM7QUFFSCxFQUFFLENBQUMsdURBQXVELEVBQUUsS0FBSyxJQUFJLEVBQUU7SUFDckUsTUFBTSx1QkFBdUIsR0FBRyxJQUFJLG1EQUF1QixFQUFFLENBQUM7SUFDOUQsdUJBQXVCLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUNwRCx1QkFBdUIsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDM0QsTUFBTSxDQUFDLHVCQUF1QixDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxRCxNQUFNLENBQUMsdUJBQXVCLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ25FLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ3JlZGVudGlhbHMgfSBmcm9tICdhd3Mtc2RrJztcbmltcG9ydCB7IFByb2ZpbGVDcmVkZW50aWFsc0NhY2hlIH0gZnJvbSAnLi4vcHJvZmlsZS1jcmVkZW50aWFscy1jYWNoZSc7XG5cbmNvbnN0IGNyZWRlbnRhaWxzID0gbmV3IENyZWRlbnRpYWxzKHtcbiAgYWNjZXNzS2V5SWQ6ICdkdW1teScsXG4gIHNlY3JldEFjY2Vzc0tleTogJ2R1bW15Jyxcbn0pO1xuXG5pdCgnc2hvdWxkIHJldHVybiBmYWxzZSBpZiBjYWNoZSBpcyBlbXB0eScsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgcHJvZmlsZUNyZWRlbnRpYWxzQ2FjaGUgPSBuZXcgUHJvZmlsZUNyZWRlbnRpYWxzQ2FjaGUoKTtcbiAgZXhwZWN0KHByb2ZpbGVDcmVkZW50aWFsc0NhY2hlLmhhcygncHJvZmlsZScpKS50b0JlKGZhbHNlKTtcbiAgZXhwZWN0KHByb2ZpbGVDcmVkZW50aWFsc0NhY2hlLmdldCgncHJvZmlsZScpKS50b0JlKHVuZGVmaW5lZCk7XG59KTtcblxuaXQoJ3Nob3VsZCByZXR1cm4gZmFsc2UgaWYgY3JlZGVudGFpbHMgYXJlIG5vdCBjYWNoZWQnLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHByb2ZpbGVDcmVkZW50aWFsc0NhY2hlID0gbmV3IFByb2ZpbGVDcmVkZW50aWFsc0NhY2hlKCk7XG4gIHByb2ZpbGVDcmVkZW50aWFsc0NhY2hlLnNldCgnYW5vdGhlclByb2ZpbGUnLCBjcmVkZW50YWlscyk7XG4gIGV4cGVjdChwcm9maWxlQ3JlZGVudGlhbHNDYWNoZS5oYXMoJ3Byb2ZpbGUnKSkudG9CZShmYWxzZSk7XG4gIGV4cGVjdChwcm9maWxlQ3JlZGVudGlhbHNDYWNoZS5nZXQoJ3Byb2ZpbGUnKSkudG9CZSh1bmRlZmluZWQpO1xufSk7XG5cbml0KCdzaG91bGQgcmV0dXJuIHRydWUgaWYgY3JlZGVudGFpbHMgYXJlIGNhY2hlZCcsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgcHJvZmlsZUNyZWRlbnRpYWxzQ2FjaGUgPSBuZXcgUHJvZmlsZUNyZWRlbnRpYWxzQ2FjaGUoKTtcbiAgcHJvZmlsZUNyZWRlbnRpYWxzQ2FjaGUuc2V0KCdwcm9maWxlJywgY3JlZGVudGFpbHMpO1xuICBleHBlY3QocHJvZmlsZUNyZWRlbnRpYWxzQ2FjaGUuaGFzKCdwcm9maWxlJykpLnRvQmUodHJ1ZSk7XG4gIGV4cGVjdChwcm9maWxlQ3JlZGVudGlhbHNDYWNoZS5nZXQoJ3Byb2ZpbGUnKSkudG9CZShjcmVkZW50YWlscyk7XG59KTtcblxuaXQoJ3Nob3VsZCByZXR1cm4gdHJ1ZSBpZiBjcmVkZW50YWlscyBhcmUgbGlzdGVkIGluIGNhY2hlJywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBwcm9maWxlQ3JlZGVudGlhbHNDYWNoZSA9IG5ldyBQcm9maWxlQ3JlZGVudGlhbHNDYWNoZSgpO1xuICBwcm9maWxlQ3JlZGVudGlhbHNDYWNoZS5zZXQoJ3Byb2ZpbGUnLCBjcmVkZW50YWlscyk7XG4gIHByb2ZpbGVDcmVkZW50aWFsc0NhY2hlLnNldCgnYW5vdGhlclByb2ZpbGUnLCBjcmVkZW50YWlscyk7XG4gIGV4cGVjdChwcm9maWxlQ3JlZGVudGlhbHNDYWNoZS5oYXMoJ3Byb2ZpbGUnKSkudG9CZSh0cnVlKTtcbiAgZXhwZWN0KHByb2ZpbGVDcmVkZW50aWFsc0NhY2hlLmdldCgncHJvZmlsZScpKS50b0JlKGNyZWRlbnRhaWxzKTtcbn0pO1xuIl19